{"version":3,"sources":["recipe.module.css","logo.svg","recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","image","__webpack_require__","p","Recipe","props","react_default","a","createElement","className","style","title","ingredients","map","ingredient","text","calories","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","i","src_recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,MAAA,oGCDlBH,EAAAC,QAAiBG,EAAAC,EAAuB,gMCqBzBC,EAlBA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMV,QACpBM,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,OACXL,EAAAC,EAAAC,cAAA,UACGH,EAAMO,YAAYC,IAAI,SAAAC,GAAU,OAC/BR,EAAAC,EAAAC,cAAA,UAAKM,EAAWC,SAGpBT,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,uBACCH,EAAMW,UAETV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMT,MAAOgB,IAAKZ,EAAMJ,MAAOiB,IAAI,OC8C1CC,EAzDH,WACV,IADgBC,EAIcC,mBAAS,IAJvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAITK,EAJSH,EAAA,GAIAI,EAJAJ,EAAA,GAAAK,EAKYN,mBAAS,IALrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKTE,EALSD,EAAA,GAKDE,EALCF,EAAA,GAAAG,EAMUV,mBAAS,WANnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAMTE,EANSD,EAAA,GAMFE,EANEF,EAAA,GAQhBG,oBAAU,WACRC,KACC,CAACH,IAEJ,IAAMG,EAAU,eAAAC,EAAAd,OAAAe,EAAA,EAAAf,CAAAgB,EAAAhC,EAAAiC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAhC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OACShB,EADT,YAAAgB,OAZf,WAYe,aAAAA,OAXd,sCAUG,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAIEL,EAASS,OAJX,OAIXR,EAJWE,EAAAK,KAKjBxB,EAAWiB,EAAKS,MALC,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAAJ,EAAAiB,MAAAC,KAAAC,YAAA,GAgBhB,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcgD,SAPhB,SAAAC,GAChBA,EAAEC,iBACFzB,EAASL,GACTC,EAAU,MAKNxB,EAAAC,EAAAC,cAAA,SACEoD,KAAK,OACLnD,UAAU,eACVoD,MAAOhC,EACPiC,SAfa,SAAAJ,GACnB5B,EAAU4B,EAAEK,OAAOF,UAgBfvD,EAAAC,EAAAC,cAAA,UAAQoD,KAAK,SAASnD,UAAU,iBAAhC,WAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZgB,EAAQZ,IAAI,SAACb,EAAQgE,GAAT,OACX1D,EAAAC,EAAAC,cAACyD,EAAD,CACEC,IAAK,UAAYF,EACjBrD,MAAOX,EAAOA,OAAOmE,MACrBnD,SAAUhB,EAAOA,OAAOgB,SACxBf,MAAOD,EAAOA,OAAOC,MACrBW,YAAaZ,EAAOA,OAAOY,iBAnBnC,MCtBgBwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a56f8475.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2yMey\",\"image\":\"recipe_image__3b1ms\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = props => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{props.title}</h1>\r\n      <ol>\r\n        {props.ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>\r\n        <b>Calories: </b>\r\n        {props.calories}\r\n      </p>\r\n      <img className={style.image} src={props.image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Recipe from \"./recipe\";\n\nconst App = () => {\n  const App_ID = \"7b2770a8\";\n  const App_Key = \"8f5c30c5a72dddd67ca28ec5c537b73a \";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${App_ID}&app_key=${App_Key}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <form className=\"search_form\" onSubmit={getSearch}>\n        <input\n          type=\"text\"\n          className=\"search_input\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button type=\"submit\" className=\"search_button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe, i) => (\n          <Recipe\n            key={\"recipe_\" + i}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n      ;\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}